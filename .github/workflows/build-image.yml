name: Build & Publish Docker Image (from config.yml version)

on:
  push:
    branches:
      - main
    # Opcional: Você pode adicionar filtros de 'paths' aqui para economizar o disparo inicial do workflow,
    # mas a lógica de filtragem dentro do job da matriz ainda será essencial.
    paths:
       - '**/config.yaml'
       - '**/start.sh'
       - '**/Dockerfile'

  workflow_dispatch: # Permite disparo manual

permissions:
  contents: read
  packages: write # Necessário para push para GHCR

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        addon:
          - name: wpp-connect-addon
            config_path: ./wpp-connect-addon/config.yaml
            context: ./wpp-connect-addon
            dockerfile: ./wpp-connect-addon/Dockerfile
            image_name: wpp-connect-addon

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Novo passo: Obter arquivos alterados (para filtrar builds)
      - name: Get changed files relevant to ${{ matrix.addon.name }}
        id: check_changes
        uses: tj-actions/changed-files@v40
        with:
          # Define os caminhos que, se alterados, indicam que este addon precisa de um build.
          # Inclua o diretório do contexto e o Dockerfile.
          files_yaml: |
            ${{ matrix.addon.context }}/**
            ${{ matrix.addon.dockerfile }}
            ${{ matrix.addon.config_path }} # Importante para pegar mudanças de versão

      # Novo passo: Determinar se o build deve ocorrer para este addon específico
      - name: Decide if build is needed for ${{ matrix.addon.name }}
        id: determine_build
        run: |
          # A variável build_addon será 'true' se:
          # 1. tj-actions/changed-files detectou que arquivos relevantes a este addon foram alterados, OU
          # 2. O workflow foi disparado manualmente via workflow_dispatch (neste caso, construímos todos).
          if [ "${{ steps.check_changes.outputs.any_changed }}" == "true" ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Building for ${{ matrix.addon.name }} (files changed or manual dispatch)."
            echo "build_addon=true" >> $GITHUB_ENV # Define a variável de ambiente para passos subsequentes
          else
            echo "No relevant changes for ${{ matrix.addon.name }}. Skipping build."
            echo "build_addon=false" >> $GITHUB_ENV # Define a variável de ambiente como falsa
          fi
          echo "build_addon: ${{ env.build_addon }}" # Para depuração no log

      # Todas as etapas abaixo agora terão uma condição 'if' para serem executadas
      # apenas se 'build_addon' for 'true'.

      - name: Extract version from config.yml
        id: extract_version
        if: env.build_addon == 'true' # Só executa se determinamos que o build é necessário
        run: |
          if [ ! -f "${{ matrix.addon.config_path }}" ]; then
            echo "Error: config.yml not found at ${{ matrix.addon.config_path }}. Cannot extract version."
            exit 1
          fi
          NEW_VERSION=$(grep 'version:' "${{ matrix.addon.config_path }}" | sed -E 's/version:\s*"([^"]+)".*/\1/')
          
          echo "Debug: Extracted version from config.yml -> $NEW_VERSION"
          
          if [ -z "$NEW_VERSION" ]; then
            echo "Error: No version extracted from ${{ matrix.addon.config_path }}."
            exit 1
          else
            echo "version_from_config=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Docker Login to GitHub Container Registry
        if: env.build_addon == 'true' # Só executa se determinamos que o build é necessário
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: env.build_addon == 'true' # Só executa se determinamos que o build é necessário
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata (tags, labels)
        id: meta
        if: env.build_addon == 'true' # Só executa se determinamos que o build é necessário
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.addon.image_name }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            type=raw,value=${{ steps.extract_version.outputs.version_from_config }}
            type=raw,value=${{ steps.extract_version.outputs.version_from_config | trimprefix('v') }},enable=${{ startsWith(steps.extract_version.outputs.version_from_config, 'v') }}
            type=sha,format=short
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.version=${{ steps.extract_version.outputs.version_from_config }}

      - name: Build and push Docker image
        if: env.build_addon == 'true' # Só executa se determinamos que o build é necessário
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.addon.context }}
          file: ${{ matrix.addon.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # - name: Verify image push (optional)
      #   if: env.build_addon == 'true' # Só executa se o build/push ocorreu
      #   run: |
      #     echo "Image ${{ steps.meta.outputs.tags }} pushed successfully to GHCR!"
